 I have backend code

server.js

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

// mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
//     .then(() => console.log('MongoDB connected'))
//     .catch(err => console.error(err));

mongoose.connect(process.env.MONGO_URI)
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.error(err));


const userRoutes = require('./routes/user').router;
const noteRoutes = require('./routes/note');

app.use('/api/users', userRoutes);
app.use('/api/notes', noteRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(Server running on port ${PORT}));
---------------------------------------------------------------------------------
.env

MONGO_URI=mongodb://localhost:27017/notesuser
JWT_SECRET=your_jwt_secret
---------------------------------------------------------------------------------- 
models/Note.js

const mongoose = require('mongoose');

const noteSchema = new mongoose.Schema({
    title: { type: String, required: true },
    content: { type: String, required: true },
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
}, { timestamps: true });

module.exports = mongoose.model('Note', noteSchema);
-----------------------------------------------------------------------------
models/User.js

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

module.exports = mongoose.model('User', userSchema);
----------------------------------------------------------------------------
routes/note.js

const express = require('express');
const Note = require('../models/Note');
const { auth } = require('./user'); // Import auth middleware

const router = express.Router();

// Create note
router.post('/', auth, async (req, res) => {
    const { title, content } = req.body;
    const note = new Note({ title, content, user: req.user.id });
    await note.save();
    res.status(201).json(note);
});

// Get notes
router.get('/', auth, async (req, res) => {
    const notes = await Note.find({ user: req.user.id });
    res.json(notes);
});

// Update note
router.put('/:id', auth, async (req, res) => {
    const { title, content } = req.body;
    const note = await Note.findByIdAndUpdate(req.params.id, { title, content }, { new: true });
    res.json(note);
});

// Delete note
router.delete('/:id', auth, async (req, res) => {
    await Note.findByIdAndDelete(req.params.id);
    res.send('Note deleted');
});

// Search notes
router.get('/search', auth, async (req, res) => {
    const { q } = req.query;
    const notes = await Note.find({
        user: req.user.id,
        title: { $regex: q, $options: 'i' }
    });
    res.json(notes);
});

module.exports = router;
-----------------------------------------------------------------------
routes/user.js

const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

// Register
router.post('/register', async (req, res) => {
    const { username, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, password: hashedPassword });
    await user.save();
    res.status(201).send('User registered');
});

// Login
router.post('/login', async (req, res) => {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user || !await bcrypt.compare(password, user.password)) {
        return res.status(401).send('Invalid credentials');
    }
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);
    res.json({ token });
});

// Middleware for authentication
const auth = (req, res, next) => {
    // const token = req.headers['authorization'];
    // if (!token) return res.sendStatus(403);
    // jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    //     if (err) return res.sendStatus(403);
    //     req.user = user;
    //     next();
    // });

    const token = req.headers['authorization']?.split(' ')[1]; // Extract token from "Bearer token"

    if (!token) return res.sendStatus(401); // No token provided

    jwt.verify(token, process.env.TOKEN_SECRET, (err, user) => {
        if (err) return res.sendStatus(403); // Token is no longer valid
        req.user = user; // Store user info
        next();
    });
};

// Change password
router.post('/change-password', auth, async (req, res) => {
    const { newPassword } = req.body;
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await User.findByIdAndUpdate(req.user.id, { password: hashedPassword });
    res.send('Password updated');
});

module.exports = { router, auth };
----------------------------------------------------------------------
frontend code which is in react

App.js

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import Register from './components/Register';
import Login from './components/Login';
import Notes from './components/Notes';

const App = () => {
    // const [token, setToken] = useState(null);

    const [token, setToken] = useState(() => {
      return localStorage.getItem('token') || null; // Retrieve token from localStorage
  });

  useEffect(() => {
    if (token) {
        localStorage.setItem('token', token); // Save token to localStorage
    } else {
        localStorage.removeItem('token'); // Remove token if not set
    }
}, [token]);


    return (
        <Router>
            <Routes>
                <Route path="/register" element={<Register />} />
                <Route path="/login" element={<Login setToken={setToken} />} />
                <Route path="/notes" element={token ? <Notes token={token} /> : <Navigate to="/login" />} />
                <Route path="*" element={<Navigate to="/login" />} />
            </Routes>
        </Router>
    );
};

export default App;

-------------------------------------------------------
components/Login.js

import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const Login = ({ setToken }) => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate(); // Hook to programmatically navigate

    // const handleSubmit = async (e) => {
    //     e.preventDefault();
    //     const response = await axios.post('http://localhost:5000/api/users/login', { username, password });
    //     setToken(response.data.token);
    // };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.post('http://localhost:5000/api/users/login', { username, password });
            setToken(response.data.token);
            alert('Login successful!'); // Optional: Alert on successful login
        } catch (error) {
            console.error('Login error:', error);
            alert('Login failed: ' + error.response.data); // Show the error message to the user
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="text" placeholder="Username" value={username} onChange={e => setUsername(e.target.value)} required />
            <input type="password" placeholder="Password" value={password} onChange={e => setPassword(e.target.value)} required />
            <button type="submit">Login</button>
        </form>
    );
};

export default Login;
------------------------------------------------------------------- 
components/NoteForm.js

import React, { useState } from 'react';
import axios from 'axios';

const NoteForm = ({ setNotes, token }) => {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');

    const handleSubmit = async (e) => {
        e.preventDefault();
        const response = await axios.post('http://localhost:5000/api/notes', { title, content }, {
            headers: { Authorization: token }
        });
        setNotes(prevNotes => [...prevNotes, response.data]);
        setTitle('');
        setContent('');
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="text" placeholder="Title" value={title} onChange={e => setTitle(e.target.value)} required />
            <textarea placeholder="Content" value={content} onChange={e => setContent(e.target.value)} required />
            <button type="submit">Add Note</button>
        </form>
    );
};

export default NoteForm;
--------------------------------------------------------------------------------------
components/Notes.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import NoteForm from './NoteForm';

const Notes = ({ token }) => {
    const [notes, setNotes] = useState([]);
    const [search, setSearch] = useState('');

    useEffect(() => {
        const fetchNotes = async () => {
            // const response = await axios.get('http://localhost:5000/api/notes', {
            //     headers: { Authorization: token }
            // });
            // setNotes(response.data);

            try {
                const response = await axios.get('http://localhost:5000/api/notes', {
                    headers: { Authorization: Bearer ${token} } // Make sure to prefix the token with "Bearer "
                });
                setNotes(response.data);
            } catch (error) {
                console.error('Error fetching notes:', error);
            }
        };
        fetchNotes();
    }, [token]);

    const handleSearch = async () => {
        const response = await axios.get(http://localhost:5000/api/notes/search?q=${search}, {
            headers: { Authorization: token }
        });
        setNotes(response.data);
    };

    return (
        <div>
            <input
                type="text"
                placeholder="Search notes"
                value={search}
                onChange={e => setSearch(e.target.value)}
            />
            <button onClick={handleSearch}>Search</button>
            <NoteForm setNotes={setNotes} token={token} />
            <ul>
                {notes.map(note => (
                    <li key={note._id}>
                        <h3>{note.title}</h3>
                        <p>{note.content}</p>
                        {/* Add Update and Delete functionality here */}
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default Notes;

-----------------------------------------------------------------------------------------------
components/Register.js

import React, { useState } from 'react';
import axios from 'axios';

const Register = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');

    const handleSubmit = async (e) => {
        e.preventDefault();
        await axios.post('http://localhost:5000/api/users/register', { username, password });
        alert('User registered');
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="text" placeholder="Username" value={username} onChange={e => setUsername(e.target.value)} required />
            <input type="password" placeholder="Password" value={password} onChange={e => setPassword(e.target.value)} required />
            <button type="submit">Register</button>
        </form>
    );
};

export default Register;







according to above frontend and backend structure corect the code so that when i start the app  i directly redirect to the notes app but before that i have been login if i am not registered then i can go to the register page after registraion i should be redirect to login page after login i can go to the notes page where i acn see only my notes which i have been created  perform add notes delete notes edit notes and view notes functionality use appropriate midleware for that and correct the above code according to that and i can logged out also option add
please correct the code completely and accurately and mademe needful give me complete code for this project



